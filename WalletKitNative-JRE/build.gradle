apply plugin: 'c'
apply plugin: 'java-library'
apply from: '../gradle/publish.gradle'

import java.nio.file.Paths

def projectRoot = projectDir.absolutePath
def projectResMainDir = Paths.get(projectRoot, 'build', 'native', 'cryptoMain').toAbsolutePath().toString()
def projectResTestDir = Paths.get(projectRoot, 'build', 'native', 'cryptoTest').toAbsolutePath().toString()

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

static def jnaOsFromGradle(os) {
    if (os == "osx") {
        return 'darwin'
    } else if (os == "linux") {
        return os
    } else if (os == "windows") {
        return os
    }
    assert false, 'Unsupported OS: ' + os
}

static def jnaArchFromGradle(arch) {
    if (arch == 'x86-64') {
        return arch
    } else if (arch == 'x86') {
        return arch
    }
    assert false, 'Unsupported ARCH: ' + arch
}

// JNA attempts to load libraries from the classpath using the logic outlined
// at https://github.com/java-native-access/jna/blob/master/src/com/sun/jna/Platform.java.
// To take advantage of that behaviour, package our libraries in the correct directory.
static def jnaResourceFromGradle(os, arch) {
    def jos = jnaOsFromGradle(os)
    def jarch = jnaArchFromGradle(arch)

    if (os == "osx") {
        return 'darwin'
    } else {
        return "${jos}-${jarch}"
    }
}

task updateWalletKitCLibrary(type: Exec) {
/*    println "Updating wallet-kit-core C Library..."
    outputs.upToDateWhen { false }
    String repoUrl = 'https://github.com/rockwalletcode/wallet-kit-core.git'
    String branch = 'main'

    File cloneDir = file('../WalletKitNative/src/main/cpp/core')
    println "Local path: $cloneDir"

    if(cloneDir.exists()) {
        workingDir = cloneDir
        String pullCommandString = "git pull"
        println "Executing $pullCommandString"
        def command = System.getProperty("os.name").toLowerCase().contains("win")
                ? "cmd /c $pullCommandString" : pullCommandString
        def result = command.execute([], workingDir).text
        println result
    } else {
        String cloneCommandString = "git clone $repoUrl $cloneDir"
        println "Executing $cloneCommandString"

        def command = System.getProperty("os.name").toLowerCase().contains("win")
            ? "cmd /c $cloneCommandString" : cloneCommandString
        def result = command.execute([], project.rootDir).text
        println result

        cloneDir = file('../WalletKitNative/src/main/cpp/core')
        if(!cloneDir.exists()) {
            throw new GradleException("Git clone wallet-kit-core failed. Make sure git is installed.")
        }

        println 'Local wallet-kit-core updated.'
    }*/
}

model {
    toolChains {
        clang(Clang)
    }
    platforms {
        // x86 is deprecated on macOS; only support x86-64
        darwin {
            operatingSystem "osx"
            architecture "x86_64"
        }
        linux32 {
            operatingSystem "linux"
            architecture "x86"
        }
        linux64 {
            operatingSystem "linux"
            architecture "x86_64"
        }
    }
    components {
        sqlite3(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir project(':WalletKitNative').cppCryptoVendorSrcDir + "/sqlite3"
                        include "sqlite3.c"
                    }
                }
            }
            binaries {
                binaries.all {
                    // TODO(fix): Do we want to use this approach (config.h)?
                    cCompiler.define "_HAVE_SQLITE_CONFIG_H"
                }
                withType(StaticLibraryBinarySpec) {
                    buildable = false
                }
            }
        }

        ed25519(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir project(':WalletKitNative').cppCryptoVendorSrcDir + "/ed25519"
                        include "*.c"
                    }
                }
            }
        }

        blake2(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir project(':WalletKitNative').cppCryptoVendorSrcDir + "/blake2"
                        include "*.c"
                    }
                }
            }
        }

        yajl(NativeLibrarySpec) {
            sources {
                c {
                    //
                    source {
                        srcDir project(':WalletKitNative').cppCryptoVendorSrcDir + "/yajl/src"
                        include "*.c"
                    }
                    exportedHeaders {
                        srcDir project(':WalletKitNative').cppCryptoVendorSrcDir + "/yajl/include"
                    }
                }
            }
        }

        WalletKitCore(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDirs project(':WalletKitNative').cppCryptoMainSrcDirs
                        include "**/*.c"

                        def mainSrcDir = project(':WalletKitNative').cppCryptoMainSrcDirs.first()
                        excludeNativeSourceFolder(file("${mainSrcDir}/ethereum/les"), it)
                        excludeNativeSourceFolder(file("${mainSrcDir}/ethereum/bcs"), it)
                    }
                }
            }
            binaries {
                binaries.all {
                    project(':WalletKitNative').cppCryptoMainIncDirs.forEach {
                        cCompiler.args "-I$it"
                    }

                    lib library: 'sqlite3', linkage: 'static'
                    lib library: 'ed25519', linkage: 'static'
                    lib library: 'blake2',  linkage: 'static'
                    lib library: 'yajl',  linkage: 'static'

                }
                withType(SharedLibraryBinarySpec) {
                    def target = targetPlatform.name
                    def os = targetPlatform.operatingSystem.name
                    def arch = targetPlatform.architecture.name
                    def jnaDir = jnaResourceFromGradle(os, arch)

                    if (os == "osx") {
                        linker.args '-framework', 'Security'
                        linker.args '-lresolv'
                    }

                    // Add a task to copy the resulting library file to the JAR's resources
                    task "copyMainBinaryToLibs${target}"(type: Copy, dependsOn: tasks) {
                        from sharedLibraryFile
                        into file(Paths.get(projectResMainDir, jnaDir))
                    }
                    processResources.dependsOn("copyMainBinaryToLibs${target}")
                }
                withType(StaticLibraryBinarySpec) {
                    buildable = false
                }
            }
        }
        // Add a second target for the test version of the crypto library. This looks like it is
        // needed because we can't change the source set based on build type...
        WalletKitCoreTest(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDirs project(':WalletKitNative').cppCryptoMainSrcDirs
                        srcDirs project(':WalletKitNative').cppCryptoTestSrcDirs
                        include "**/*.c"

                        def mainSrcDir = project(':WalletKitNative').cppCryptoMainSrcDirs.first()
                        excludeNativeSourceFolder(file("${mainSrcDir}/ethereum/les"), it)
                        excludeNativeSourceFolder(file("${mainSrcDir}/ethereum/bcs"), it)
                    }
                }
            }
            binaries {
                binaries.all {
                    project(':WalletKitNative').cppCryptoMainIncDirs.forEach {
                        cCompiler.args "-I$it"
                    }

                    project(':WalletKitNative').cppCryptoTestIncDirs.forEach {
                        cCompiler.args "-I$it"
                    }

                    cCompiler.define "DEBUG"
                    cCompiler.define "BITCOIN_DEBUG"

                    lib library: 'sqlite3', linkage: 'static'
                    lib library: 'ed25519', linkage: 'static'
                    lib library: 'blake2',  linkage: 'static'
                    lib library: 'yajl',  linkage: 'static'

                }
                withType(SharedLibraryBinarySpec) {
                    def target = targetPlatform.name
                    def os = targetPlatform.operatingSystem.name
                    def arch = targetPlatform.architecture.name
                    def jnaDir = jnaResourceFromGradle(os, arch)

                    if (os == "osx") {
                        linker.args '-framework', 'Security'
                        linker.args '-lresolv'
                    }

                    // Add a task to copy the resulting library file to the JAR's resources
                    task "copyTestBinaryToLibs${target}"(type: Copy, dependsOn: tasks) {
                        from sharedLibraryFile
                        into file(Paths.get(projectResTestDir, jnaDir))
                    }

                    processTestResources.dependsOn("copyTestBinaryToLibs${target}")
                }
                withType(StaticLibraryBinarySpec) {
                    buildable = false
                }
            }
        }
    }
    tasks {
        buildAllExecutables(Task) {
            dependsOn $.binaries.findAll { it.buildable }
        }
    }
}

static def excludeNativeSourceFolder(excludeDir, sources) {
    def rootFiles = excludeDir.listFiles().toList()
    rootFiles.forEach { file ->
        if (file.isDirectory()) {
            def subFiles = file.listFiles().toList()
            subFiles.forEach { subFile ->
                sources.exclude "**/${subFile.name}"
            }
        } else {
            sources.exclude "**/${file.name}"
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateWalletKitCoreSources') {
        task.dependsOn updateWalletKitCLibrary
    }
}

sourceSets {
    main {
        java {
            srcDirs = [project(':WalletKitNative').javaMainSrcDir]
        }
        resources {
            srcDirs = [file(projectResMainDir)]
        }
    }
    // use the same source set as the main target but package in the cryptoWithTests library instead
    test {
        java {
            srcDirs = [project(':WalletKitNative').javaTestSrcDir]
        }
        resources {
            srcDirs = [file(projectResTestDir)]
        }
    }
}

dependencies {
    api deps.jnaJre
    api deps.guavaJre

    testImplementation deps.junit
}
